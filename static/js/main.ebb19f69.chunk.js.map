{"version":3,"sources":["logo.svg","subaru/Subaru Impreza Free.glb","App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","appRef","useLayoutEffect","app","pc","current","start","setCanvasFillMode","setCanvasResolution","window","addEventListener","resizeCanvas","console","log","process","modelURL","subaru","entity","assets","loadFromUrl","err","asset","addComponent","model","resource","setLocalPosition","root","addChild","type","camera","clearColor","light","setPosition","setEulerAngles","on","deltaTime","rotate","id","ref","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAe,MAA0B,iCCA1B,MAA0B,gD,eC4F1BA,EAvFH,WACR,IAAMC,EAAYC,iBAAO,MACnBC,EAASD,iBAAO,MAqExB,OAnEEE,2BAAgB,WACd,IAAMC,EAAM,IAAIC,IAAeL,EAAUM,QAAS,IAClDF,EAAIG,QAEJH,EAAII,kBAAkBH,IAA0B,GAChDD,EAAIK,oBAAoBJ,KAExBK,OAAOC,iBAAiB,UAAU,WAChCP,EAAIQ,kBAONC,QAAQC,IAAIC,yBACZ,IAAIC,EAAWC,EACXC,EAAS,IAAIb,IAGjBD,EAAIe,OAAOC,YAAYJ,EAAU,SAAS,SAAUK,EAAKC,GAEvDJ,EAAOK,aAAa,SACpBL,EAAOM,MAAMA,MAAQF,EAAMG,SAE3BP,EAAOQ,iBAAiB,EAAG,GAAI,GAC/BrB,IAAOsB,KAAKC,SAASV,MAGvBL,QAAQC,IAAII,GAWC,IAAIb,IAAU,QACtBkB,aAAa,QAAS,CACzBM,KAAM,QAGR,IAAMC,EAAS,IAAIzB,IAAU,UAC7ByB,EAAOP,aAAa,SAAU,CAC5BQ,WAAY,IAAI1B,IAAS,GAAK,GAAK,MAGrC,IAAM2B,EAAQ,IAAI3B,IAAU,SAC5B2B,EAAMT,aAAa,SAGnBnB,EAAIuB,KAAKC,SAASE,GAClB1B,EAAIuB,KAAKC,SAASI,GAElBF,EAAOG,YAAY,EAAG,EAAG,GACzBD,EAAME,eAAe,GAAI,EAAG,GAE5B9B,EAAI+B,GAAG,UAAU,SAACC,GAChBlB,EAAOmB,OAAO,EAAG,GAAKD,EAAW,MAGnClC,EAAOI,QAAUF,IAChB,IAGH,gCACE,wBAAQkC,GAAG,aAAaC,IAAKvC,IAC7B,qBAAKwC,UAAU,MAAf,SACA,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,6DCtEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ebb19f69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/Subaru Impreza Free.8b0a430b.glb\";","import React, {useLayoutEffect, useRef} from 'react';\nimport * as pc from 'playcanvas';\nimport logo from './logo.svg';\nimport subaru from './subaru/Subaru Impreza Free.glb';\nimport './App.css';\nconst App = () => {\n    const canvasRef = useRef(null);\n    const appRef = useRef(null);\n\n    useLayoutEffect(() => {\n      const app = new pc.Application(canvasRef.current, {});\n      app.start();\n\n      app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW / 2);\n      app.setCanvasResolution(pc.RESOLUTION_AUTO);\n\n      window.addEventListener('resize', function () {\n        app.resizeCanvas();\n      });\n\n\n\n      \n\n      console.log(process.env.PUBLIC_URL);\n      var modelURL = subaru;\n      var entity = new pc.Entity();\n\n      // Using the vanilla engine version which doesn't return the asset object\n      app.assets.loadFromUrl(modelURL, \"model\", function (err, asset) {\n\n        entity.addComponent(\"model\");\n        entity.model.model = asset.resource;\n\n        entity.setLocalPosition(0, 0, -5);\n        pc.app.root.addChild(entity);\n      });\n\n      console.log(entity);\n\n\n      /* var entity = new pc.Entity();\n       var url = process.env.PUBLIC_URL + '/public/model/subaru.json';\n       app.assets.loadFromUrl(url, 'model', function (err, asset) {\n         entity.addComponent('model', { type: 'asset', asset: asset.resource });\n         app.root.addChild(entity);\n       });*/\n\n    //  console.log(carasset);\n      const cube = new pc.Entity('cube');\n      cube.addComponent('model', {\n        type: 'box',\n      });\n\n      const camera = new pc.Entity('camera');\n      camera.addComponent('camera', {\n        clearColor: new pc.Color(0.1, 0.1, 0.1),\n      });\n\n      const light = new pc.Entity('light');\n      light.addComponent('light');\n\n    //  app.root.addChild(cube);\n      app.root.addChild(camera);\n      app.root.addChild(light);\n\n      camera.setPosition(0, 0, 3);\n      light.setEulerAngles(45, 0, 0);\n\n      app.on('update', (deltaTime) => {\n        entity.rotate(0, 20 * deltaTime, 0);\n      });\n\n      appRef.current = app;\n    }, []);\n\n  return (\n    <div>\n      <canvas id=\"playCanvas\" ref={canvasRef} />\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          React UI Componenet\n        </p>\n      </header>\n    </div>\n    </div>\n    \n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}