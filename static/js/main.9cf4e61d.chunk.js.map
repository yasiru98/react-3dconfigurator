{"version":3,"sources":["App.js","subaru/Subaru Impreza Free.glb","subaru/textures/camo.jpg","subaru/textures/camo2.png","subaru/53013832/ogLivery.jpg","reportWebVitals.js","index.js"],"names":["newTex","App","props","renderModel","theTex","app","pc","canvas","start","setCanvasFillMode","setCanvasResolution","window","addEventListener","resizeCanvas","camera","addComponent","clearColor","light","root","addChild","setPosition","setEulerAngles","assets","loadFromUrl","camoTex","err","asset","camoTex2","ogTex","entity","subaru","model","resource","name","setLocalPosition","undefined","console","log","meshInstances","_material","_diffuseMap","on","deltaTime","rotate","renderer","car","clickHandler","event","textureButton","printCar","textureButton2","textureButton1","target","id","reactCanvas","React","this","current","width","offsetWidth","height","offsetHeight","removeEventListener","tex","destroy","ref","onClick","style","position","top","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cf4e61d.chunk.js","sourcesContent":["import * as React from 'react'\nimport * as pc from \"playcanvas\";\nimport subaru from \"./subaru/Subaru Impreza Free.glb\";\nimport camoTex from \"./subaru/textures/camo.jpg\";\nimport camoTex2 from \"./subaru/textures/camo2.png\";\nimport ogTex from \"./subaru/53013832/ogLivery.jpg\";\nvar newTex;\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.canvas = undefined\n        this.renderer = null;\n        this.car = null;\n        this.app = null;\n        this.reactCanvas = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.canvas = this.reactCanvas.current;\n        this.canvas.width = this.canvas.offsetWidth;\n        this.canvas.height = this.canvas.offsetHeight;\n        this.renderModel();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', () => {\n            this.renderer.resizeCanvas();\n        });\n    }\n\n    renderModel = (theTex) => {\n        var app = new pc.Application(this.canvas, {});\n        app.start();\n\n        // fill the available space at full resolution\n        app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n        app.setCanvasResolution(pc.RESOLUTION_AUTO);\n\n        // ensure canvas is resized when window changes size\n        window.addEventListener('resize', function () {\n            app.resizeCanvas();\n        });\n\n\n        // create camera entity\n        var camera = new pc.Entity('camera');\n        camera.addComponent('camera', {\n            clearColor: new pc.Color(0.1, 0.1, 0.1)\n        });\n\n        // create directional light entity\n        var light = new pc.Entity('light');\n        light.addComponent('light');\n\n        // add to hierarchy\n\n        app.root.addChild(camera);\n        app.root.addChild(light);\n\n        // set up initial positions and orientations\n        camera.setPosition(0, 0, 3);\n        light.setEulerAngles(45, 0, 0);\n\n        //load textures\n        app.assets.loadFromUrl(camoTex, \"texture\", function (err, asset) {\n\n        });\n        app.assets.loadFromUrl(camoTex2, \"texture\", function (err, asset) {\n\n        });\n        app.assets.loadFromUrl(ogTex, \"texture\", function (err, asset) {\n\n        });\n        //load car model\n        var entity = new pc.Entity();\n        app.assets.loadFromUrl(subaru, \"model\", function (err, asset) {\n            entity.addComponent(\"model\");\n            entity.model.model = asset.resource;\n            entity.name = \"car\";\n            entity.setLocalPosition(0, 0, -5);\n\n            if (theTex !== undefined) {\n                console.log(theTex);\n                asset.resource.meshInstances[8]._material._diffuseMap = theTex;\n            }\n            pc.app.root.addChild(entity);\n        });\n\n\n        app.on('update', function (deltaTime) {\n            entity.rotate(0, 10 * deltaTime, 0);\n        });\n        this.app = app;\n        this.renderer = app;\n        this.car = entity;\n    }\n    printCar(tex) {\n        console.log(pc.app.root);\n        this.car.destroy();\n        console.log(this.car);\n\n        this.app.assets.loadFromUrl(tex, \"texture\", function (err, asset) {\n            newTex = asset.resource;\n\n        });\n        this.renderModel(newTex);\n    }\n    clickHandler = event => {\n        const {\n            id\n        } = event.target\n        const handlers = {\n            textureButton: () => {\n\n                this.printCar(camoTex);\n\n            },\n            textureButton2: () => {\n\n                this.printCar(camoTex2);\n\n            },\n            textureButton1: () => {\n\n                this.printCar(ogTex);\n\n            },\n        }\n\n        handlers[id]();\n    }\n\n    render(){\n        return (\n          <div>\n            <canvas ref={this.reactCanvas} id='3d-drawing-canvas'>This browser doesn't support canvas</canvas>\n            <button onClick={this.clickHandler} id='textureButton1' style={{position:'fixed', top: 0, left: 0, width:'200px', height:'50px'}}>\n          Original\n          </button>\n          <button onClick={this.clickHandler} id='textureButton' style={{position:'fixed', top: 50, left: 0, width:'200px', height:'50px'}}>\n          Camo1\n          </button>\n          <button onClick={this.clickHandler} id='textureButton2' style={{position:'fixed', top: 100, left: 0, width:'200px', height:'50px'}}>\n          Camo2\n          </button>\n          \n          \n         </div>\n        )\n    }\n}\nexport default App;","export default __webpack_public_path__ + \"static/media/Subaru Impreza Free.8b0a430b.glb\";","export default __webpack_public_path__ + \"static/media/camo.8047775f.jpg\";","export default __webpack_public_path__ + \"static/media/camo2.e7718b2c.png\";","export default __webpack_public_path__ + \"static/media/ogLivery.f2a6b0d7.jpg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}