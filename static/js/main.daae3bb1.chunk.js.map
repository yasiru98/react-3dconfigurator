{"version":3,"sources":["App.js","subaru/Subaru Impreza Free.glb","subaru/textures/camo.jpg","reportWebVitals.js","index.js"],"names":["newTex","App","props","renderModel","theTex","app","pc","canvas","start","setCanvasFillMode","setCanvasResolution","window","addEventListener","resizeCanvas","camera","addComponent","clearColor","light","root","addChild","setPosition","setEulerAngles","assets","loadFromUrl","camoTex","err","asset","resource","entity","subaru","model","name","setLocalPosition","meshInstances","_material","_diffuseMap","on","deltaTime","rotate","renderer","car","clickHandler","event","textureButton","printCar","target","id","undefined","reactCanvas","React","this","current","width","offsetWidth","height","offsetHeight","removeEventListener","console","log","destroy","ref","onClick","style","position","top","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAIIA,E,4ECJW,MAA0B,gDCA1B,MAA0B,iC,OFuH1BC,E,kDAjHX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAsBXC,YAAc,SAACC,GACN,IAAIC,EAAM,IAAIC,IAAe,EAAKC,OAAQ,IAC1CF,EAAIG,QAGJH,EAAII,kBAAkBH,KACtBD,EAAIK,oBAAoBJ,KAGxBK,OAAOC,iBAAiB,UAAU,WAC9BP,EAAIQ,kBAKR,IAAIC,EAAS,IAAIR,IAAU,UAC3BQ,EAAOC,aAAa,SAAU,CAC1BC,WAAY,IAAIV,IAAS,GAAK,GAAK,MAIvC,IAAIW,EAAQ,IAAIX,IAAU,SAC1BW,EAAMF,aAAa,SAInBV,EAAIa,KAAKC,SAASL,GAClBT,EAAIa,KAAKC,SAASF,GAGlBH,EAAOM,YAAY,EAAG,EAAG,GACzBH,EAAMI,eAAe,GAAI,EAAG,GAC5BhB,EAAIiB,OAAOC,YAAYC,EAAS,WAAW,SAAUC,EAAKC,GACxD1B,EAAS0B,EAAMC,YAGjB,IAAIC,EAAS,IAAItB,IACjBD,EAAIiB,OAAOC,YAAYM,EAAQ,SAAS,SAAUJ,EAAKC,GACrDE,EAAOb,aAAa,SACpBa,EAAOE,MAAMA,MAAQJ,EAAMC,SAC3BC,EAAOG,KAAO,MACdH,EAAOI,iBAAiB,EAAG,GAAI,GAC/BN,EAAMC,SAASM,cAAc,GAAGC,UAAUC,YAAe/B,EAC1DE,IAAOY,KAAKC,SAASS,MAKtBvB,EAAI+B,GAAG,UAAU,SAAUC,GACxBT,EAAOU,OAAO,EAAG,GAAKD,EAAW,MAEpC,EAAKhC,IAAMA,EACX,EAAKkC,SAAWlC,EAChB,EAAKmC,IAAMZ,GA5ED,EAyFlBa,aAAe,SAAAC,IAEO,CAChBC,cAAgB,WAEd,EAAKC,cAJOF,EAAMG,OAAbC,OAxFT,EAAKvC,YAASwC,EACd,EAAKR,SAAW,KAChB,EAAKC,IAAM,KACX,EAAKnC,IAAM,KACX,EAAK2C,YAAcC,cANL,E,qDAUlB,WACIC,KAAK3C,OAAS2C,KAAKF,YAAYG,QAC/BD,KAAK3C,OAAO6C,MAAQF,KAAK3C,OAAO8C,YAChCH,KAAK3C,OAAO+C,OAASJ,KAAK3C,OAAOgD,aACjCL,KAAK/C,gB,kCAGT,WAAuB,IAAD,OAClBQ,OAAO6C,oBAAoB,UAAU,WAC7B,EAAKjB,SAAS1B,oB,sBA2D1B,WACE4C,QAAQC,IAAIpD,IAAOY,MACnBgC,KAAKV,IAAImB,UACTF,QAAQC,IAAIR,KAAKV,KAEjBU,KAAK7C,IAAIiB,OAAOC,YAAYC,EAAS,WAAW,SAAUC,EAAKC,GAC7D1B,EAAS0B,EAAMC,YAGhBuB,KAAK/C,YAAYH,K,oBAepB,WACI,OACE,gCACE,wBAAQ4D,IAAKV,KAAKF,YAAaF,GAAG,oBAAlC,iDACF,wBAAQe,QAASX,KAAKT,aAAcK,GAAG,gBAAgBgB,MAAO,CAACC,SAAS,QAASC,IAAK,EAAGC,KAAM,EAAGb,MAAM,QAASE,OAAO,SAAxH,mC,GA3GQL,aGOHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.daae3bb1.chunk.js","sourcesContent":["import * as React from 'react'\nimport * as pc from \"playcanvas\";\nimport subaru from \"./subaru/Subaru Impreza Free.glb\";\nimport camoTex from \"./subaru/textures/camo.jpg\";\nvar newTex;\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n        this.canvas = undefined\n        this.renderer = null;\n        this.car = null;\n        this.app = null;\n        this.reactCanvas = React.createRef();\n     \n    }\n\n    componentDidMount(){\n        this.canvas = this.reactCanvas.current;\n        this.canvas.width = this.canvas.offsetWidth;\n        this.canvas.height = this.canvas.offsetHeight;\n        this.renderModel();\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener('resize', () => {\n                this.renderer.resizeCanvas();\n            });\n    }\n\n   renderModel = (theTex) => {\n            var app = new pc.Application(this.canvas, { });\n            app.start();\n\n            // fill the available space at full resolution\n            app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n            app.setCanvasResolution(pc.RESOLUTION_AUTO);\n\n            // ensure canvas is resized when window changes size\n            window.addEventListener('resize', function() {\n                app.resizeCanvas();\n            });\n\n\n            // create camera entity\n            var camera = new pc.Entity('camera');\n            camera.addComponent('camera', {\n                clearColor: new pc.Color(0.1, 0.1, 0.1)\n            });\n\n            // create directional light entity\n            var light = new pc.Entity('light');\n            light.addComponent('light');\n\n            // add to hierarchy\n \n            app.root.addChild(camera);\n            app.root.addChild(light);\n\n            // set up initial positions and orientations\n            camera.setPosition(0, 0, 3);\n            light.setEulerAngles(45, 0, 0);\n            app.assets.loadFromUrl(camoTex, \"texture\", function (err, asset) {\n              newTex = asset.resource;\n             }); \n            //load car model\n            var entity = new pc.Entity();\n            app.assets.loadFromUrl(subaru, \"model\", function (err, asset) {\n              entity.addComponent(\"model\");\n              entity.model.model = asset.resource;\n              entity.name = \"car\";\n              entity.setLocalPosition(0, 0, -5);\n              asset.resource.meshInstances[8]._material._diffuseMap  = theTex;\n             pc.app.root.addChild(entity);\n            });\n\n       \n\n            app.on('update', function (deltaTime) {\n               entity.rotate(0, 10 * deltaTime, 0);\n            });\n            this.app = app;\n            this.renderer = app;\n            this.car = entity;\n    }\n    printCar(){\n      console.log(pc.app.root);\n      this.car.destroy();\n      console.log(this.car);\n   \n      this.app.assets.loadFromUrl(camoTex, \"texture\", function (err, asset) {\n        newTex = asset.resource;\n   \n       }); \n       this.renderModel(newTex);\n    }\n    clickHandler = event => {\n         const { id } = event.target\n         const handlers = {\n          textureButton : () => {\n           \n            this.printCar();\n          \n          }\n         }\n\n         handlers[id]();\n    }\n\n    render(){\n        return (\n          <div>\n            <canvas ref={this.reactCanvas} id='3d-drawing-canvas'>This browser doesn't support canvas</canvas>\n          <button onClick={this.clickHandler} id='textureButton' style={{position:'fixed', top: 0, left: 0, width:'200px', height:'100px'}}>\n          Change Texture\n          </button>\n         </div>\n        )\n    }\n}\nexport default App;","export default __webpack_public_path__ + \"static/media/Subaru Impreza Free.8b0a430b.glb\";","export default __webpack_public_path__ + \"static/media/camo.8047775f.jpg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}